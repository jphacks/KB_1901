package api

import (
	"../logger"
    "encoding/json"
    "io/ioutil"
    "net/http"
    "net/url"
	"time"
    //"fmt"
)

const (
    STOREURL     = "https://api.gnavi.co.jp/RestSearchAPI/v3/"
	AREAURL     = "https://api.gnavi.co.jp/master/GAreaSmallSearchAPI/v3/"
    CONSUMER_KEY = "e33d36e16e80413abfaf5caa66d49e66"
)

type AreaGenerated struct {
	Attributes struct {
		APIVersion string `json:"api_version"`
	} `json:"@attributes"`
	GareaSmall []struct {
		AreacodeS   string `json:"areacode_s"`
		AreanameS   string `json:"areaname_s"`
		GareaMiddle struct {
			AreacodeM string `json:"areacode_m"`
			AreanameM string `json:"areaname_m"`
		} `json:"garea_middle"`
		GareaLarge struct {
			AreacodeL string `json:"areacode_l"`
			AreanameL string `json:"areaname_l"`
		} `json:"garea_large"`
		Pref struct {
			PrefCode string `json:"pref_code"`
			PrefName string `json:"pref_name"`
		} `json:"pref"`
	} `json:"garea_small"`
}

type AutoGenerated struct {
    Attributes struct {
        APIVersion string `json:"api_version"`
    } `json:"@attributes"`
    TotalHitCount int `json:"total_hit_count"`
    HitPerPage    int `json:"hit_per_page"`
    PageOffset    int `json:"page_offset"`
    Rest          []struct {
        Attributes struct {
            Order int `json:"order"`
        } `json:"@attributes"`
        ID         string    `json:"id"`
        UpdateDate time.Time `json:"update_date"`
        Name       string    `json:"name"`
        NameKana   string    `json:"name_kana"`
        Latitude   string    `json:"latitude"`
        Longitude  string    `json:"longitude"`
        Category   string    `json:"category"`
        URL        string    `json:"url"`
        URLMobile  string    `json:"url_mobile"`
        CouponURL  struct {
            Pc     string `json:"pc"`
            Mobile string `json:"mobile"`
        } `json:"coupon_url"`
        ImageURL struct {
            ShopImage1 string `json:"shop_image1"`
            ShopImage2 string `json:"shop_image2"`
            Qrcode     string `json:"qrcode"`
        } `json:"image_url"`
        Address  string `json:"address"`
        Tel      string `json:"tel"`
        TelSub   string `json:"tel_sub"`
        Fax      string `json:"fax"`
        Opentime string `json:"opentime"`
        Holiday  string `json:"holiday"`
        Access   struct {
            Line        string `json:"line"`
            Station     string `json:"station"`
            StationExit string `json:"station_exit"`
            Walk        string `json:"walk"`
            Note        string `json:"note"`
        } `json:"access"`
        ParkingLots string `json:"parking_lots"`
        Pr          struct {
            PrShort string `json:"pr_short"`
            PrLong  string `json:"pr_long"`
        } `json:"pr"`
        Code struct {
            Areacode      string   `json:"areacode"`
            Areaname      string   `json:"areaname"`
            Prefcode      string   `json:"prefcode"`
            Prefname      string   `json:"prefname"`
            AreacodeS     string   `json:"areacode_s"`
            AreanameS     string   `json:"areaname_s"`
            CategoryCodeL []string `json:"category_code_l"`
            CategoryNameL []string `json:"category_name_l"`
            CategoryCodeS []string `json:"category_code_s"`
            CategoryNameS []string `json:"category_name_s"`
        } `json:"code"`
        Budget     int    `json:"budget"`
        Party      int `json:"party int"`
        Lunch      int `json:"lunch int"`
        CreditCard string `json:"credit_card"`
        EMoney     string `json:"e_money"`
        Flags      struct {
            MobileSite   int `json:"mobile_site"`
            MobileCoupon int `json:"mobile_coupon"`
            PcCoupon     int `json:"pc_coupon"`
        } `json:"flags"`
    } `json:"rest"`
}

func StoreGetApi( url_option string ) (result *http.Response, err error){
    values := url.Values{}
    values.Add( "keyid", CONSUMER_KEY )
	conn_url := STOREURL + "?" + values.Encode() + url_option
	logger.Write_log( conn_url, 1 )
    resp, err := http.Get( conn_url )
    return resp, err
}

func StoreReturnStruct( url_option string ) (result AutoGenerated, err error ) {
	autogenerated := new( AutoGenerated )
    tmp, err := StoreGetApi( url_option )

	if err != nil {
		return *autogenerated, err
	}
	
    var byteArray, _ = ioutil.ReadAll( tmp.Body )
	
    if err := json.Unmarshal(byteArray, &autogenerated); err != nil {
        return *autogenerated, err
    }
	
    return *autogenerated, nil
}

func AreaGetApi() (result *http.Response, err error){
    values := url.Values{}

    values.Add( "keyid", CONSUMER_KEY )

	conn_url := AREAURL + "?" + values.Encode() + "&lang=ja"

	logger.Write_log( conn_url, 1 )

    resp, err := http.Get( conn_url )

    return resp, err
}

func AreaReturnStruct() ( result AreaGenerated, err error ) {

	autogenerated := new( AreaGenerated )

    tmp, err := AreaGetApi()

	if err != nil {
		return *autogenerated, err
	}


	if tmp == nil {
		return *autogenerated, err
	}

    byteArray, err := ioutil.ReadAll( tmp.Body )

	if err != nil {
		return *autogenerated, err
	}

    if err := json.Unmarshal(byteArray, &autogenerated); err != nil {
        return *autogenerated, err
    }

    return *autogenerated, nil
}

